<% layout('layout') %>
<script>
    window.onunload = function () {
        window.location.replace('/GAMEROOMLIST');
    }
</script>

<div class="modal-content">
    roomName : <%= roomname %>
</div>

<div>
    <br/>

    <div id="emulator"></div>
    <br/>
    <script src="/socket.io/socket.io.js"></script>
    <script src="js/peer.js" type="text/javascript" charset="utf-8"></script>
    <script src="//api.turnservers.com/api.js?key=ajeuRdpXfHWQcBPQaVfQnGUqKXkuttpK"></script>

    <script src="lib/jquery-2.1.3.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="lib/dynamicaudio-min.js" type="text/javascript" charset="utf-8"></script>

    <script src="source/nes.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/utils.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/cpu.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/keyboard.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/mappers.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/papu.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/ppu.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/rom.js" type="text/javascript" charset="utf-8"></script>
    <script src="source/ui.js" type="text/javascript" charset="utf-8"></script>

    <script type="text/javascript" charset="utf-8">
        var socket = io.connect();
        var peer;

        window.turnserversDotComAPI.iceServers(function (data) {
            peer = new Peer({
                        key: 'kkgy1v6piamaq0k9',
                        debug: 3,
                        config: {'iceServers': data}
                    }
            );
        });
        //peer open
        peer.on('open', function (id) {
            console.log("1P 고유 아이디 생성 : " + id);
            socket.emit('save_1p_peer_id', {peer_1p_id: id});
        });

        //peer 연결
        peer.on('connection', function (conn) {
            setInterval(function () {
                conn.send({
                    imgSrc: nes.ui.screenshot()
                });
            }, 1000 / 30);
        });

        //peer error
        peer.on('error', function (err) {
            console.log(err.message);
        });

        var nes;
        var roomname = "<%= roomname %>";
        var userid = "<%= username %>";
        var game = "<%= game %>";
        var playerCount = "<%= playerCount %>"

        $(function () {
            nes = new JSNES({
                'ui': $('#emulator').JSNESUI({
                    "Homebrew": [
                        ['Concentration Room', 'roms/croom.nes'],
                        ['LJ65', 'roms/lj65.nes']
                    ],
                    "Working": [
                        ['Bubble Bobble', 'roms/Bubble Bobble.nes'],
                        ['Contra', 'roms/Contra.nes'],
                        ['Donkey Kong', 'roms/Donkey Kong.nes'],
                        ['Dr. Mario', 'roms/Dr. Mario.nes'],
                        ['Golf', 'roms/Golf.nes'],
                        ['The Legend of Zelda', 'roms/Legend of Zelda.nes'],
                        ['Lemmings', 'roms/Lemmings.nes'],
                        ['Lifeforce', 'roms/Lifeforce.nes'],
                        ['Mario Bros.', 'roms/Mario Bros.nes'],
                        ['Mega Man', 'roms/Mega Man.nes'],
                        ['Pac-Man', 'roms/Pac-Man.nes'],
                        ['Super Mario Bros.', 'roms/Super Mario Bros.nes'],
                        ['Tennis', 'roms/Tennis.nes'],
                        ['Tetris', 'roms/Tetris.nes'],
                        ['Tetris 2', 'roms/Tetris 2.nes'],
                        ['Zelda II - The Adventure of Link', 'roms/Zelda 2.nes']
                    ],

                    "Nearly Working": [
                        ['Super Mario Bros. 3', 'roms/Super Mario Bros3.nes']
                    ]
                })
            });

            $('#game_select option[value="roms/' + game + '.nes"]').attr('selected', 'selected').change();

            $('#game_select').hide();

            $('.nes-enablesound').click();
            $('.nes-zoom').click();

            $('.nes-enablesound').hide();
            $('.nes-pause').hide();
            $('.nes-zoom').hide();
        });

        socket.on('new', function () {
            socket.emit('join', {'roomname': roomname});
            socket.emit('webSingUp', userid + '_webPage', {
                'roomname': roomname,
                'game': game,
                'playerCount': playerCount
            });
        });

        //1P 버튼
        socket.on('btn_1', function (msg) {
            switch (msg) {
                case 'A':
                    nes.keyboard.keyDown({keyCode: 88});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 88});
                    break;
                case 'B':
                    nes.keyboard.keyDown({keyCode: 90});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 90});
                    break;
                case 'select':
                    nes.keyboard.keyDown({keyCode: 17});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 17});
                    break;
                case 'start':
                    nes.keyboard.keyDown({keyCode: 13});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 13});
                    break;
                default :
                    break;
            }
        });

        //2P 버튼
        socket.on('btn_2', function (msg) {
            switch (msg) {
                case 'A':
                    nes.keyboard.keyDown({keyCode: 103});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 103});
                    break;
                case 'B':
                    nes.keyboard.keyDown({keyCode: 105});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 105});
                    break;
                case 'select':
                    nes.keyboard.keyDown({keyCode: 99});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 99});
                    break;
                case 'start':
                    nes.keyboard.keyDown({keyCode: 97});
                    nes.frame();
                    nes.keyboard.keyUp({keyCode: 97});
                    break;
                default :
                    break;
            }
        });

        //1P 방향키
        socket.on('pad_1', function (msg, flag) {
            switch (msg) {
                case 'up':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 38});
                        nes.keyboard.keyPress({keyCode: 38});
                    } else {
                        nes.keyboard.keyUp({keyCode: 38});
                    }
                    break;
                case 'right':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 39});
                        nes.keyboard.keyPress({keyCode: 39});
                    } else {
                        nes.keyboard.keyUp({keyCode: 39});
                    }
                    break;
                case 'left':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 37});
                        nes.keyboard.keyPress({keyCode: 37});
                    } else {
                        nes.keyboard.keyUp({keyCode: 37});
                    }
                    break;
                case 'down':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 40});
                        nes.keyboard.keyPress({keyCode: 40});
                    } else {
                        nes.keyboard.keyUp({keyCode: 40});
                    }
                    break;
            }
        });

        //2P 방향키
        socket.on('pad_2', function (msg, flag) {
            switch (msg) {
                case 'up':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 104});
                        nes.keyboard.keyPress({keyCode: 104});
                    } else {
                        nes.keyboard.keyUp({keyCode: 104});
                    }
                    break;
                case 'right':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 102});
                        nes.keyboard.keyPress({keyCode: 102});
                    } else {
                        nes.keyboard.keyUp({keyCode: 102});
                    }
                    break;
                case 'left':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 100});
                        nes.keyboard.keyPress({keyCode: 100});
                    } else {
                        nes.keyboard.keyUp({keyCode: 100});
                    }
                    break;
                case 'down':
                    if (flag === 0) {
                        nes.keyboard.keyDown({keyCode: 98});
                        nes.keyboard.keyPress({keyCode: 98});
                    } else {
                        nes.keyboard.keyUp({keyCode: 98});
                    }
                    break;
            }
        });

        //방에서 플레이어가 나갔을 때
        socket.on('reStart', function () {
            nes.reloadRom();
            nes.start();
        })

    </script>
</div>