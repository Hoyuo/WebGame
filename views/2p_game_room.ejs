<% layout('layout') %>

<div class="modal-content">
    roomName : <%= roomInfo.roomName %>
</div>

<div style="text-align: center">
    <br/>

    <div style="display: flex;">
        <div style="margin-top:50px; float: left;">
            <image style="width:250px; height:350px;" src="Key.PNG"></image>
        </div>

        <div stlye="margin:auto;">
            <image id="game_screen" width="512" height="480"></image>
        </div>
    </div>
    <br/>

    <script src="/socket.io/socket.io.js"></script>
    <script src="js/peer.js" type="text/javascript" charset="utf-8"></script>
    <script src="//api.turnservers.com/api.js?key=ajeuRdpXfHWQcBPQaVfQnGUqKXkuttpK"></script>
    <script src="lib/jquery-2.1.3.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="js/alertify.min.js"></script>
    <link rel="stylesheet" href="stylesheets/alertify.core.css"/>
    <link rel="stylesheet" href="stylesheets/alertify.bootstrap.css"/>

    <script>
        function goBack() {
            history.go(-1);
        }
    </script>

    <script>
        var socket = io.connect();
        var peer;

        window.turnserversDotComAPI.iceServers(function (data) {
            peer = new Peer({
                        key: 'kkgy1v6piamaq0k9',
                        debug: 3,
                        config: {'iceServers': data}
                    }
            );
        });

        var roomNum = "<%= roomInfo.roomNum %>"
        var roomname = "<%= roomInfo.roomName %>";

        var game = "<%= roomInfo.gameName %>";


        var peer_1p_id = "<%= roomInfo.peer_1p_id %>";

        var dataConnection = peer.connect(peer_1p_id, {reliable: true});//, serialization: 'json'});

        peer.on('open', function (id) {
            console.log("2P 고유 아이디 생성 : " + id);
            console.log("1P 고유 아이디 : " + peer_1p_id);

            socket.emit('set_2p_peer_id', {
                roomNum: roomNum,
                peer_2p_id: id
            });
            //console.log(dataConnection.serialization);
        });

        dataConnection.on('close', function () {
            //연결 해제 부분
            alertify.alert('The user has left', function () {
                location.href = "/gameroomlist";
            });

            //console.log("Datachannel Close");
        });

        dataConnection.on('data', function (data) {
            //console.log("receive");
            var canvas = document.getElementById('game_screen');
            canvas.src = data.imgSrc;
        });


        //peer connection
        peer.on('connection', function (conn) {
            //console.log('connection');
        });

        //peer error
        peer.on('error', function (err) {
            console.log(err.message);
        });

        $('body').on('keydown', function (evt) {
            var key = evt.keyCode;
            evt.preventDefault();
            var send;
            var flag = 2;
            switch (key) {
                case 88:
                    send = 'A';
                    flag = 0;
                    break;
                case 90:
                    send = 'B';
                    flag = 0;
                    break;
                case 17:
                    send = 'select';
                    flag = 0;
                    break;
                case 13:
                    send = 'start';
                    flag = 0;
                    break;

                case 38:
                    send = 'up';
                    flag = 1;
                    break;
                case 39:
                    send = 'right';
                    flag = 1;
                    break;
                case 37:
                    send = 'left';
                    flag = 1;
                    break;
                case 40:
                    send = 'down';
                    flag = 1;
                    break;
            }

            if (flag === 0) {
                /*socket.emit('btn_web', {
                 key: send
                 });*/
                dataConnection.send({
                    key: send
                });
            }
            else if (flag === 1) {
                /*socket.emit('pad_web', {
                 key: send,
                 flag: 0
                 });*/
                dataConnection.send({
                    key: send,
                    flag: 0
                });
            }
        });

        $('body').on('keyup', function (evt) {
            var key = evt.keyCode;
            var flag = 2;
            evt.preventDefault();
            var send;
            switch (key) {
                case 38:
                    send = 'up';
                    flag = 1;
                    break;
                case 39:
                    send = 'right';
                    flag = 1;
                    break;
                case 37:
                    send = 'left';
                    flag = 1;
                    break;
                case 40:
                    send = 'down';
                    flag = 1;
                    break;
            }

            if (flag === 1) {
                /*socket.emit('pad_web', {
                 key: send,
                 flag: 1
                 });*/
                dataConnection.send({
                    key: send,
                    flag: 1
                });
            }
        });

        socket.on('new', function () {
            socket.emit('join', {
                'roomNum': roomNum,
                'roomname': roomname
            });
            socket.emit('webSingUp', userid + '_webPage_2p');
        });

        socket.emit('disconnect', {});

        socket.on('reStart', function () {
            alertify.alert('The user has left', function () {
                location.href = "/gameroomlist";
            });
        });

    </script>
</div>